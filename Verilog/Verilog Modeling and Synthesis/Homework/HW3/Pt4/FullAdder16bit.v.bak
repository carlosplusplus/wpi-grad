// Carlos Lazo
// ECE574
// Homework #3

// Part 4: Full Adder, 16 bit implementation,
//         using the adder implemenation from Pt3.

`timescale 1ns/100ps

module FullAdder16bit (a, b, cin, s, cout);
  
  // Define a parameter so that the adder can be any size:
  
  parameter SIZE = 16;
  
  // Define inputs and outputs:
  
  input  [SIZE-1:0] a, b;
  input  cin;
  
  output [SIZE-1:0] s;
  output cout;
  
  // Variable for moving current cout to the cin of the next adder.
  
  wire   [(SIZE/4)-1:0] carry;
  
  genvar i; // Loop variable.
  
  // Generate all instances of full adders, and link them together.
  
  generate
    
    for (i=0; i < (SIZE/4); i=i+1) begin : full_adders
      
      // If this is the first run, take in the first
      // cin value, and begin processing accordingly.
      
      if (i == 0)
        FullAdder4bit_Pt3 bg (a[3:0], b[3:0], cin, s[3:0], carry[0]);
        
      // If we are at the last index, do the final calculation
      // and set the final carry out value to co.
      
      else if (i == (SIZE/4)-1)
        FullAdder4bit_Pt3 la (a[(4*i)+3:(4*i)], b[(4*i)+3:(4*i)], carry[i-1], s[(4*i)+3:(4*i)], cout);
      
      // Otherwise, the current cin is the previous cout,
      // and the current cout is the newly generated cout.
      
      else
        FullAdder4bit_Pt3 fa (a[(4*i)+3:(4*i)], b[(4*i)+3:(4*i)], carry[i-1], s[(4*i)+3:(4*i)], carry[i]);
                
    end
 
  endgenerate
  
endmodule